"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

require("core-js/modules/es.array.map");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ToolBarMenuOptions = void 0;

var React = _interopRequireWildcard(require("react"));

var _components = require("@storybook/components");

var _constants = require("../../shared/constants");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var ToolBarMenuOptions = function ToolBarMenuOptions(_ref) {
  var activeName = _ref.activeName,
      list = _ref.list,
      onSelectOption = _ref.onSelectOption;
  return React.createElement(_components.TooltipLinkList, {
    links: list.map(function (name) {
      return {
        key: name,
        id: name,
        title: name !== _constants.OPT_OUT ? name : 'Off',
        active: name === activeName,
        onClick: onSelectOption(name)
      };
    })
  });
};

exports.ToolBarMenuOptions = ToolBarMenuOptions;